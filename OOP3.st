Object subclass: #OOPEnum	instanceVariableNames: 'values lazyInitialization'	classVariableNames: ''	poolDictionaries: ''	category: 'OOP3'!!OOPEnum methodsFor: 'class-methods' stamp: 'db 5/17/2022 18:40'!compile: aSourceCode	| superClass codeSelector tempClass |	superClass := self superclass .	(superClass superclass = OOPEnum) ifTrue: [		tempClass := (ClassBuilder new) 		superclass: Object		subclass:  #TMP		instanceVariableNames: ''		classVariableNames:  ''		poolDictionaries:  ''		category: ''.		tempClass compile: aSourceCode notifying: nil.		codeSelector := (tempClass selectors ) at: 1.		(superClass includesSelector: codeSelector) ifFalse: [			tempClass removeSelector: codeSelector.			self error: codeSelector, ' does not override a method from ', superClass			] 		ifTrue: [			tempClass removeSelector: codeSelector.			^self compile: aSourceCode notifying: nil			]		] 	ifFalse: [		^self compile: aSourceCode notifying: nil		].! !!OOPEnum methodsFor: 'class-methods' stamp: 'db 5/16/2022 17:15'!new	self error: 'You can''t create an instance of ' , self name! !!OOPEnum methodsFor: 'class-methods' stamp: 'db 5/16/2022 17:22'!subclass: aSubclassName instanceVariableNames: instVarNames classVariableNames: classVarNames poolDictionaries: poolDictionaries category: aCategory	self error: 'You must specify ' , aSubclassName , '''s values'! !!OOPEnum methodsFor: 'class-methods' stamp: 'db 5/17/2022 18:38'!subclass: aSubclassName values: valuesArr lazyInitialization: aBoolean initialize: initializeAsString instanceVariableNames: instVarNames classVariableNames: classVarNames poolDictionaries: poolDictionaries category: aCategoryName	| newClass newClassClass valuesClassArr |	(self == OOPEnum ) ifFalse: [		self error: self name , ' is final!!!! It can''t be inherited'	].	newClass := (ClassBuilder new)		superclass: self		subclass: aSubclassName		instanceVariableNames: instVarNames		classVariableNames: classVarNames		poolDictionaries: poolDictionaries 		category: aCategoryName.	newClass compile: initializeAsString.	newClassClass := newClass class.	valuesArr do: [:v | newClassClass addInstVarName: v].		newClassClass compile: 'setValuesArr values := ', valuesArr.	newClass setValuesArr. 	"newClass removeSelector: 'setValuesArr'."	valuesClassArr := valuesArr collect: [:v | (ClassBuilder new)		superclass: newClass		subclass: ((aSubclassName,'_',v,'__') asSymbol)		instanceVariableNames: ''		classVariableNames: '' 		poolDictionaries: '' 		category: aCategoryName].	(aBoolean) ifFalse: [		| func |		func := 'initVals'.		(1 to: valuesArr size) do: [:i |			| valName valClass |			valName := valuesArr at: i.			valClass := valuesClassArr at: i.			func := func, valName , ':= ', valClass, 'basicNew initialize.' ].		newClassClass compile: func.		newClass initVals.		valuesArr do: [:v | newClassClass compile: v, '^',v].		] ifTrue: [		| func |			func := 'initVals'.			valuesArr do: [:v | func := func , v , ' := nil.'].			newClassClass compile: func.			newClass initVals.			(1 to: valuesArr size) do: [:i |				| valName valClass|				valName := valuesArr at: i.				valClass := valuesClassArr at: i.				newClassClass compile: valName, '(',valName,' == nil) ifTrue: [', valName,
				' := ' , valClass,' basicNew initialize].^', valName]		].	newClassClass compile: 'setLazyInitialization		lazyInitialization := ', aBoolean.	newClass setLazyInitialization.	^newClass.! !